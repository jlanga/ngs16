def list_fastqs_to_assemble_forward(wildcards):
    """
    Make from the wildcards a list of paths to the trimmed and forward (i.e., 
    data/fastq_trimmed/{sample}_{partition}_1.fq.gz)
    """
    partitions = list([str(x + 1) for x in range(int(wildcards.sampling))])
    forwards = [
        trimmed + wildcards.tissue + "_" + partition + "_1.fq.gz"
        for partition in partitions
    ]
    return forwards



def string_fastqs_to_assemble_forward(wildcards):
    """
    Merge the list of _1 paths into one string, separating all paths by a comma.
    """
    return ",".join(list(list_fastqs_to_assemble_forward(wildcards)))



def list_fastqs_to_assemble_reverse(wildcards):
    """
    Make from the wildcards a list of paths to the trimmed and forward (i.e., 
    data/fastq_trimmed/{sample}_{partition}_2.fq.gz)
    """
    partitions = list([str(x + 1) for x in range(int(wildcards.sampling))])
    reverses = [
        trimmed + wildcards.tissue + "_" + partition + "_2.fq.gz"
        for partition in partitions
    ]
    return reverses



def string_fastqs_to_assemble_reverse(wildcards):
    """
    Merge the list of _2 paths into one string, separating all paths by a comma.
    """
    return ",".join(list(list_fastqs_to_assemble_reverse(wildcards)))



rule assembly_run_trinity_tissue_sampling:
    """
    Assemble with trinity. Inputs are a list, but in params we have them as a 
    very long string.
    Remember that this assembly is incremental (i.e., for partition 5 we take 
    the fastqs from partition 1-5).
    """
    input:
        left  = list_fastqs_to_assemble_forward,
        right = list_fastqs_to_assemble_reverse
    output:
        fasta = assembly + "{tissue}_{sampling}.fa"
    threads:
        8
    params:
        left  = string_fastqs_to_assemble_forward,
        right = string_fastqs_to_assemble_reverse, 
        memory= config["trinity_params"]["memory"],
        outdir= assembly + "trinity_{tissue}_{sampling}"
    log:
        "logs/assembly/{tissue}_{sampling}.log"
    benchmark:
        "benchmarks/assembly/{tissue}_{sampling}.log"
    shell:
        """
        ./bin/Trinity \
            --seqType fq \
            --max_memory {params.memory} \
            --left {params.left} \
            --right {params.right} \
            --CPU {threads} \
            --full_cleanup \
            --output {params.outdir} \
        > {log}
        
        mv {params.outdir}.Trinity.fasta {output.fasta}
        
        #rm {input.left}.readcount {input.right}.readcount
        """



rule assembly_makeblastdb_cdna:
    input:
        fa = references + "cdna.fa"
    output:
        db = touch(db + "cdna")
    threads:
        1
    log:
        "logs/assembly/makeblastdb_cdna.log"
    benchmark:
        "benchmarks/assembly/makeblastdb_cdna.json"
    shell:
        """
        makeblastdb \
            -dbtype nucl \
            -title "Danio Rerio cDNA" \
            -in {input.fa} \
            -out {output.db} \
        2> {log} 1>&2
        """



rule assembly_blastn_cdna_tissue_sampling:
    input:
        fa = assembly + "{tissue}_{sampling}.fa",
        db = db + "cdna"
    output:
        tsv = blastn + "{tissue}_{sampling}.tsv"
    threads:
        1 # Low intensity
    log:
        "logs/assembly/blastn_cdna_{tissue}_{sampling}.log"
    benchmark:
        "benchmarks/assembly/blastn_cdna_{tissue}_{sampling}.json"
    shell:
        """
         blastn \
            -query {input.fa} \
            -db {input.db} \
            -max_target_seqs 1 \
            -out {output.tsv} \
            -evalue 1e-5 \
            -outfmt 6 \
            -num_threads {threads} \
        2> {log} 1>&2
        """



rule assemby_counts:
    """
    From the blastn results, make a tsv consisting of # unique hits in the 
    transcriptome per tissue and sampling:
    tissue TAB sampling TAB hits
    """
    input:
        tsvs= expand(
            blastn + "{tissue}_{sampling}.tsv",
            tissue = config["samples_pe"],
            sampling = sample_idx
        )
    output:
        tsv = blastn + "matches.tsv"
    params:
        tissues = " ".join(config["samples_pe"]),
        samplings = " ".join(sample_idx)
    threads:
        1
    log:
        "logs/assembly/counts.log"
    benchmark:
        "benchmarks/assembly/counts.json"
    shell:
        """
        cat /dev/null > {output.tsv}
        
        for tissue in {params.tissues}; do
            for sampling in {params.samplings}; do
                hits=$(cut -f 2 < {blastn}${{tissue}}_${{sampling}}.tsv | sort -u | wc -l)
                echo ${{tissue}}\t${{sampling}}\t${{hits}} >> {output.tsv}
            done
        done
        """
