rule genome_hisat2index:
    """
    Index the fasta genome for HiSat2.
    """
    input:
        fa = references + "dna.fa"
    output:
        files = expand(
            indexes + "dna.{extensions}.bt2",
            extensions = "1 2 3 4 5 6 7 8".split()),
        mock  = touch(indexes + "dna")
    threads:
        1
    log:
        "logs/genome/hisat2index.log"
    benchmark:
        "benchmarks/genome/hisat2index.json"
    shell:
        """
        {hisat2build} \
            {input.fa} \
            {output.mock} \
        > {log} 2>&1 
        """



rule genome_hisat2_tissue_sampling:
    """
    Perform the mapping and bam conversions:
    HiSat2 | samtools view | samtools rmdup | samtools sort
    """
    input:
        forward  = trimmed + "{tissue}_{sampling}_1.fq.gz",
        reverse  = trimmed + "{tissue}_{sampling}_2.fq.gz",
        unpaired = trimmed + "{tissue}_{sampling}_u.fq.gz",
        index    = indexes + "dna"
    output:
        bam      = bam_dna + "{tissue}_{sampling}.bam"
    params:
        other_params = config["hisat2params"]["other"],
        sq_id        = "{tissue}",
        sq_library   = "LB:truseq_{tissue}",
        sq_platform  = "PL:Illumina",
        sq_sample    = "SM:{tissue}_{sampling}"
    threads:
        24
    log:
        "logs/genome/hisat2_{tissue}_{sampling}.log"
    benchmark:
        "benchmarks/genome/hisat2_{tissue}_{sampling}.json"
    shell:
        """
        ( {hisat2} \
            --rg-id {params.sq_id} \
            --rg {params.sq_library} \
            --rg {params.sq_platform} \
            --rg {params.sq_sample} \
            --threads {threads} \
            --dta \
            {params.other_params} \
            -x {input.index} \
            -1 {input.forward} \
            -2 {input.reverse} \
            -U {input.unpaired} |
        {samtools0} view \
            -S \
            -h \
            -u \
            - |
        {samtools0} rmdup \
            -s - - |
        {samtools0} sort \
            -@ {threads} \
            -l 9 \
            -o \
            - \
            - \
        > {output.bam} ) \
        2>  {log}
        """



def list_gbams_to_merge(wildcards):
    """
    This is a helping function to compose a list of paths to the different bams.
    For i = 5
    """
    partitions = list([str(x + 1) for x in range(int(wildcards.sampling))])
    forwards = [
        bam_dna + wildcards.tissue + "_" + partition + ".bam"
        for partition in partitions
    ]
    return forwards


rule genome_samtools_merge_tissue_sampling:
    input:
        bam = list_gbams_to_merge
    output:
        bam = bam_dna_merged + "{tissue}_{sampling}.bam"
    threads:
        4
    log:
        "logs/genome/samtools_merge_{tissue}_{sampling}.log"
    benchmark:
        "benchmarks/genome/samtools_merge_{tissue}_{sampling}.json"
    run:
        import os
        if len(input) == 1:
            shell("ln --symbolic $(readlink --canonicalize {input.bam}) {output.bam}")
        else:
            shell(
                """
                {samtools0} merge \
                -l 9 \
                -@ 24 \
                {output.bam} \
                {input.bam} \
                2> {log}
                """
            )




rule genome_stringtie_tissue_sampling:
    input:
        bam = bam_dna_merged + "{tissue}_{sampling}.bam",
        gff = references + "annotation.gff"
    output:
        gff = gff_dna + "{tissue}_{sampling}.gff"
    threads:
        1
    params:
        label   = "{tissue}_{sampling}",
    log:
        "logs/genome/stringtie_{tissue}_{sampling}.log"
    benchmark:
        "benchmarks/genome/stringtie_{tissue}_{sampling}.json"
    shell:
        """
        {stringtie} \
            {input.bam} \
            -G {input.gff} \
            -l {params.label} \
            -o {output.gff} \
            -p {threads} \
        2>> {log}
        """



rule genome_counts:
    input:
        gffs =  expand(
            gff_dna + "{tissue}_{sampling}.gff",
            tissue = config["samples_pe"],
            sampling = sample_idx
        )
    output:
        tsv = gff_dna + "counts.tsv"
    threads:
        1
    params:
        tissues = " ".join(config["samples_pe"]),
        samplings = " ".join(sample_idx)
    log:
        "logs/genome/counts.log"
    benchmark:
        "benchmarks/genome/counts.json"
    shell:
        """
        cat /dev/null > {output.tsv}
        
        for tissue in {params.tissues}; do
            for sampling in {params.samplings}; do
                hits=$( \
                    grep -v ^# {gff_dna}${{tissue}}_${{sampling}}.gff |
                    awk '{{if($3 == "transcript") print}}' |
                    cut -f 9 |
                    grep reference_id |
                    egrep -o 'ENSDART[[:digit:]]{{11}}' |
                    sort -u |
                    wc -l \
                )
                echo ${{tissue}}\t${{sampling}}\t${{hits}} >> {output.tsv}
            done
        done
        """
